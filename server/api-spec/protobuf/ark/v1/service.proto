syntax = "proto3";

package ark.v1;

import "google/api/annotations.proto";

service ArkService {
  rpc RegisterInputsForNextRound(RegisterPaymentRequest) returns (RegisterPaymentResponse) {
    option (google.api.http) = {
      post: "/v1/payment/registerInputs"
      body: "*"
    };
  };
  rpc RegisterOutputsForNextRound(ClaimPaymentRequest) returns (ClaimPaymentResponse) {
    option (google.api.http) = {
      post: "/v1/payment/registerOutputs"
      body: "*"
    };
  };
  rpc SubmitSignedForfeitTransactions(FinalizePaymentRequest) returns (FinalizePaymentResponse) {
    option (google.api.http) = {
      post: "/v1/payment/submitForfeitTransactions"
      body: "*"
    };
  };
  rpc SubmitSignedVtxoTree(FinalizePaymentRequest) returns (FinalizePaymentResponse) {
    option (google.api.http) = {
      post: "/v1/payment/submitForfeitTransactions"
      body: "*"
    };
  };
  rpc GetRound(GetRoundRequest) returns (GetRoundResponse) {
    option (google.api.http) = {
      get: "/v1/round/{txid}"
    };
  };
  rpc GetRoundById(GetRoundByIdRequest) returns (GetRoundByIdResponse) {
    option (google.api.http) = {
      get: "/v1/round/id/{id}"
    };
  };
  rpc GetEventStream(GetEventStreamRequest) returns (stream GetEventStreamResponse) {
    option (google.api.http) = {
      get: "/v1/events"
    };
  };
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      get: "/v1/ping/{payment_id}"
    };
  };
  rpc ListVtxos(ListVtxosRequest) returns (ListVtxosResponse) {
    option (google.api.http) = {
      get: "/v1/vtxos/{address}"
    };
  }
  rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/v1/info"
    };
  }
  rpc Onboard(OnboardRequest) returns (OnboardResponse) {
    option (google.api.http) = {
      post: "/v1/onboard"
      body: "*"
    };
  }
}

message RegisterPaymentRequest {
  repeated Input inputs = 1;
}
message RegisterPaymentResponse {
  // Mocks wabisabi's credentials.
  string id = 1;
}

message ClaimPaymentRequest {
  string id = 1;
  repeated Output outputs = 2;
}
message ClaimPaymentResponse {}

message FinalizePaymentRequest {
  // Forfeit txs signed by the user. 
  repeated string signed_forfeit_txs = 1;
}
message FinalizePaymentResponse {}

message GetRoundRequest {
  string txid = 1;
}
message GetRoundResponse {
  Round round = 1;
}

message GetRoundByIdRequest {
  string id = 1;
}
message GetRoundByIdResponse {
  Round round = 1;
}

message GetEventStreamRequest {}
message GetEventStreamResponse {
  oneof event {
    // TODO: BTC add "signTree" event
    RoundFinalizationEvent round_finalization = 1;
    RoundFinalizedEvent round_finalized = 2;
    RoundFailed round_failed = 3;
  }
}

message PingRequest {
  string payment_id = 1;
}
message PingResponse {
  repeated string forfeit_txs = 1;
  RoundFinalizationEvent event = 2;
}

message ListVtxosRequest {
  string address = 1;
}
message ListVtxosResponse {
  repeated Vtxo spendable_vtxos = 1;
  repeated Vtxo spent_vtxos = 2;
}

message GetInfoRequest {}
message GetInfoResponse {
  string pubkey = 1;
  int64 round_lifetime = 2;
  int64 unilateral_exit_delay = 3;
  int64 round_interval = 4;
  string network = 5;
  int64 min_relay_fee = 6;
  repeated string supported_script_policies = 7;
}

message OnboardRequest {
  string boarding_txid = 1;
  string descriptor = 2;
}
message OnboardResponse {}

// EVENT TYPES

message RoundFinalizationEvent {
  string id = 1;
  string round_tx = 2;
  repeated string forfeit_txs = 3;
  Tree vtxo_tree = 4;
  repeated string connectors = 5;
}

message RoundFinalizedEvent {
  string id = 1;
  string round_txid = 2;
}

message RoundFailed {
  string id = 1;
  string reason = 2;
}

// TYPES

enum RoundStage {
  ROUND_STAGE_UNSPECIFIED = 0;
  ROUND_STAGE_REGISTRATION = 1;
  ROUND_STAGE_FINALIZATION = 2;
  ROUND_STAGE_FINALIZED = 3;
  ROUND_STAGE_FAILED = 4;
}

message Round {
  string id = 1;
  int64 start_unix = 2;
  int64 end_unix = 3;
  string round_tx = 4;
  Tree vtxo_tree = 5;
  repeated string forfeit_txs = 6;
  repeated string connectors = 7;
  RoundStage stage = 8;
}

message Outpoint {
  string txid = 1;
  uint32 vout = 2;
}

message Output {
  // Either the offchain or onchain address.
  string address = 1;
  // Amount to send in satoshis.
  uint64 amount = 2;
}

message Tree {
  repeated TreeLevel levels = 1;
}

message TreeLevel {
  repeated Node nodes = 1;
}

message Node {
  string txid = 1;
  string tx = 2;
  string parent_txid = 3;
}

message Vtxo {
  Outpoint outpoint = 1;
  uint64 value = 2;
  string asset = 3;
  string descriptor = 4;
  bool spent = 5;
  string round_txid = 6;
  string spent_by = 7;
  int64 expire_at = 8;
  bool swept = 9;
}
